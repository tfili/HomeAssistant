close_garage_doors:
  alias: Close Garage Doors
  sequence:
  - parallel:
    - if:
      - condition: state
        entity_id: cover.wrapped_left_garage
        state: open
      then:
      - action: cover.close_cover
        data: {}
        target:
          entity_id: cover.wrapped_left_garage
    - if:
      - condition: state
        entity_id: cover.wrapped_right_garage
        state: open
      then:
      - action: cover.close_cover
        data: {}
        target:
          entity_id: cover.wrapped_right_garage
  mode: single
  icon: mdi:garage
alarm_tasks_no_arm:
  sequence:
  - alias: Do alarm tasks
    event: alarm_tasks_no_arm
    event_data:
      entity_id: alarm_control_panel.abode_alarm
  alias: Alarm tasks without arming
  mode: single
start_vacuum_or_mop:
  alias: Start vacuum or mop
  description: Starts a vacuum or mop. It makes sure it's docked first and waits for
    it to complete
  fields:
    entity_id:
      name: Entity of the vacuum or mop
      description: The entity ID of the cleaning device that should be started
      required: true
      selector:
        entity:
          multiple: false
          filter:
          - domain: vacuum
  sequence:
  - if:
    - condition: template
      value_template: '{{ not is_state(entity_id, ''docked'') }}'
    then:
    - action: vacuum.stop
      data: {}
      target:
        entity_id: '{{ entity_id }}'
    - delay:
        hours: 0
        minutes: 0
        seconds: 10
        milliseconds: 0
    - action: vacuum.return_to_base
      data: {}
      target:
        entity_id: '{{ entity_id }}'
    - wait_for_trigger:
      - trigger: template
        value_template: '{{ is_state(entity_id, ''docked'') }}'
      timeout:
        hours: 0
        minutes: 10
        seconds: 0
        milliseconds: 0
    - if:
      - condition: template
        value_template: '{{ not wait.completed }}'
      then:
      - variables:
          result_value: false
      - action: notify.mobile_app_toms_iphone
        data:
          title: Failed to start
          message: '{{ entity_id }}''s state is {{ states(entity_id) }} and failed
            to dock'
      - stop: Could not start
        response_variable: result_value
      else: []
  - action: vacuum.start
    data: {}
    target:
      entity_id: '{{ entity_id }}'
  - wait_for_trigger:
    - trigger: template
      value_template: '{{ is_state(entity_id, ''docked'') }}'
    timeout:
      hours: 4
      minutes: 0
      seconds: 0
      milliseconds: 0
  - variables:
      result_value: '{{ wait.completed }}'
  - stop: Finished
    response_variable: result_value
  mode: single
  icon: mdi:robot-vacuum
